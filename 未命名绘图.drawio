<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36" version="26.0.16">
  <diagram name="第 1 页" id="g-F0-cACahd_g80SVnAp">
    <mxGraphModel dx="2785" dy="2857" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-1" value="pkg\fuzzer\fuzzer.go" style="swimlane;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="580" y="-330" width="310" height="330" as="geometry" />
        </mxCell>
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-2" value="&lt;div&gt;func &lt;font style=&quot;color: rgb(255, 128, 0);&quot;&gt;newExecQueues&lt;/font&gt;(fuzzer *Fuzzer) execQueues {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; ret := &lt;font style=&quot;color: rgb(255, 0, 0);&quot;&gt;execQueues&lt;/font&gt;{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; triageCandidateQueue: queue.DynamicOrder(),&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; candidateQueue:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;queue.Plain(),&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; triageQueue:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; queue.DynamicOrder(),&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; smashQueue:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;queue.Plain(),&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; skipQueue := 3&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if fuzzer.Config.PatchTest {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; skipQueue = 2&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; ret.source = queue.Order(&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ret.triageCandidateQueue,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ret.candidateQueue,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ret.triageQueue,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; queue.Alternate(ret.smashQueue, skipQueue),&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; queue.Callback(fuzzer.&lt;font style=&quot;color: rgb(255, 0, 0);&quot;&gt;genFuzz&lt;/font&gt;),&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; )&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return ret&lt;/div&gt;&lt;div style=&quot;&quot;&gt;}&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="8ZpCt7TOtmfmOsG7rmEz-1" vertex="1">
          <mxGeometry x="10" y="30" width="300" height="300" as="geometry" />
        </mxCell>
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-3" value="pkg\fuzzer\fuzzer.go" style="swimlane;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="964" y="-406.25" width="300" height="140" as="geometry" />
        </mxCell>
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-4" value="&lt;div&gt;type &lt;font style=&quot;color: rgb(255, 0, 0);&quot;&gt;execQueues&lt;/font&gt; struct {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; triageCandidateQueue *queue.&lt;font style=&quot;color: rgb(255, 128, 0);&quot;&gt;DynamicOrderer&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; candidateQueue&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;*queue.&lt;font style=&quot;color: rgb(255, 128, 0);&quot;&gt;PlainQueue&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; triageQueue&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; *queue.DynamicOrderer&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; smashQueue&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;*queue.PlainQueue&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; source&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;queue.&lt;font style=&quot;color: rgb(255, 128, 0);&quot;&gt;Source&lt;/font&gt;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="8ZpCt7TOtmfmOsG7rmEz-3" vertex="1">
          <mxGeometry x="10" y="30" width="290" height="110" as="geometry" />
        </mxCell>
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-5" value="pkg\fuzzer\queue\queue.go" style="swimlane;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1350" y="-560" width="240" height="120" as="geometry" />
        </mxCell>
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-6" value="&lt;div&gt;type &lt;font style=&quot;color: rgb(255, 128, 0);&quot;&gt;DynamicOrderer&lt;/font&gt; struct {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; mu&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;sync.Mutex&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; currPrio int&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; ops&amp;nbsp; &amp;nbsp; &amp;nbsp; *&lt;font style=&quot;color: rgb(128, 255, 0);&quot;&gt;priorityQueueOps&lt;/font&gt;[*&lt;font style=&quot;color: rgb(128, 255, 0);&quot;&gt;Request&lt;/font&gt;]&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="8ZpCt7TOtmfmOsG7rmEz-5" vertex="1">
          <mxGeometry x="10" y="25" width="230" height="90" as="geometry" />
        </mxCell>
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-7" value="pkg\fuzzer\queue\queue.go" style="swimlane;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1700" y="-712.5" width="225" height="80" as="geometry" />
        </mxCell>
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-8" value="&lt;div&gt;type &lt;font style=&quot;color: rgb(128, 255, 0);&quot;&gt;priorityQueueOps&lt;/font&gt;[T any] struct {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; impl &lt;font style=&quot;color: rgb(0, 102, 204);&quot;&gt;priorityQueueImpl&lt;/font&gt;[T]&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="8ZpCt7TOtmfmOsG7rmEz-7" vertex="1">
          <mxGeometry x="5" y="20" width="220" height="60" as="geometry" />
        </mxCell>
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-9" value="pkg\fuzzer\queue\queue.go" style="swimlane;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1960" y="-712.5" width="305" height="80" as="geometry" />
        </mxCell>
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-10" value="type &lt;font style=&quot;color: rgb(0, 127, 255);&quot;&gt;priorityQueueImpl&lt;/font&gt;[T any] []*&lt;font style=&quot;color: rgb(0, 255, 255);&quot;&gt;priorityQueueItem&lt;/font&gt;[T]" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="8ZpCt7TOtmfmOsG7rmEz-9" vertex="1">
          <mxGeometry x="5" y="35" width="300" height="30" as="geometry" />
        </mxCell>
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-11" value="pkg\fuzzer\queue\queue.go" style="swimlane;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="2310" y="-712.5" width="230" height="100" as="geometry" />
        </mxCell>
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-12" value="&lt;div&gt;type &lt;font style=&quot;color: rgb(0, 255, 255);&quot;&gt;priorityQueueItem&lt;/font&gt;[T any] struct {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; value T&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; prio&amp;nbsp; int&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="8ZpCt7TOtmfmOsG7rmEz-11" vertex="1">
          <mxGeometry x="10" y="25" width="220" height="70" as="geometry" />
        </mxCell>
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-13" value="pkg\fuzzer\queue\queue.go" style="swimlane;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1700" y="-582.5" width="195" height="315" as="geometry" />
        </mxCell>
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-14" value="&lt;div&gt;type &lt;font style=&quot;color: rgb(128, 255, 0);&quot;&gt;Request&lt;/font&gt; struct {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; Type&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; flatrpc.RequestType&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; ExecOpts&amp;nbsp; &amp;nbsp; flatrpc.ExecOpts&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; Prog&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; *prog.Prog&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; BinaryFile&amp;nbsp; string&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; GlobPattern string&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; ReturnAllSignal []int&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; ReturnError&amp;nbsp; &amp;nbsp; &amp;nbsp;bool&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; ReturnOutput&amp;nbsp; &amp;nbsp; bool&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; Stat *stat.Val&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; Important bool&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; Avoid []ExecutorID&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; callback DoneCallback&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; onceCrashed&amp;nbsp; bool&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; delayedSince uint64&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; mu&amp;nbsp; &amp;nbsp; &amp;nbsp;sync.Mutex&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; result *Result&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; done&amp;nbsp; &amp;nbsp;chan struct{}&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="8ZpCt7TOtmfmOsG7rmEz-13" vertex="1">
          <mxGeometry x="5" y="25" width="190" height="290" as="geometry" />
        </mxCell>
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-15" value="pkg\fuzzer\queue\queue.go" style="swimlane;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1350" y="-382.5" width="170" height="120" as="geometry" />
        </mxCell>
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-16" value="&lt;div&gt;type &lt;font style=&quot;color: rgb(255, 128, 0);&quot;&gt;PlainQueue&lt;/font&gt; struct {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; mu&amp;nbsp; &amp;nbsp; sync.Mutex&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; queue []*Request&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; pos&amp;nbsp; &amp;nbsp;int&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="8ZpCt7TOtmfmOsG7rmEz-15" vertex="1">
          <mxGeometry x="10" y="25" width="150" height="90" as="geometry" />
        </mxCell>
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-17" value="pkg\fuzzer\queue\queue.go" style="swimlane;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1350" y="-212.5" width="170" height="90" as="geometry" />
        </mxCell>
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-18" value="&lt;div&gt;type &lt;font style=&quot;color: rgb(255, 128, 0);&quot;&gt;Source&lt;/font&gt; interface {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; Next() *Request&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="8ZpCt7TOtmfmOsG7rmEz-17" vertex="1">
          <mxGeometry x="10" y="30" width="140" height="60" as="geometry" />
        </mxCell>
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-19" value="pkg\fuzzer\fuzzer.go" style="swimlane;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="969" y="80" width="300" height="360" as="geometry" />
        </mxCell>
        <mxCell id="8ZpCt7TOtmfmOsG7rmEz-20" value="&lt;div&gt;func (fuzzer *Fuzzer) &lt;font style=&quot;color: rgb(255, 0, 0);&quot;&gt;genFuzz&lt;/font&gt;() *queue.Request {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; mutateRate := 0.95&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if !fuzzer.Config.Coverage {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; mutateRate = 0.5&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; var req *queue.Request&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; rnd := fuzzer.rand()&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if rnd.Float64() &amp;lt; mutateRate {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; req = &lt;font style=&quot;color: rgb(255, 128, 0);&quot;&gt;mutateProgRequest&lt;/font&gt;(fuzzer, rnd)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if req == nil {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; req = &lt;font style=&quot;color: rgb(255, 128, 0);&quot;&gt;genProgRequest&lt;/font&gt;(fuzzer, rnd)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if fuzzer.Config.Collide &amp;amp;&amp;amp; rnd.Intn(3) == 0 {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; req = &amp;amp;queue.Request{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Prog: randomCollide(req.Prog, rnd),&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Stat: fuzzer.statExecCollide,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; fuzzer.prepare(req, 0, 0)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return req&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="8ZpCt7TOtmfmOsG7rmEz-19" vertex="1">
          <mxGeometry x="10" y="30" width="280" height="330" as="geometry" />
        </mxCell>
        <mxCell id="ia1y3fHBxI8tkKXysV4F-1" value="pkg\fuzzer\fuzzer.go" style="swimlane;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="110" y="130" width="380" height="395" as="geometry" />
        </mxCell>
        <mxCell id="ia1y3fHBxI8tkKXysV4F-2" value="&lt;div&gt;func NewFuzzer(ctx context.Context, cfg *Config, rnd *rand.Rand,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; target *prog.Target) *Fuzzer {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if cfg.NewInputFilter == nil {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cfg.NewInputFilter = func(call string) bool {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return true&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; f := &amp;amp;Fuzzer{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Stats:&amp;nbsp; newStats(target),&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Config: cfg,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Cover:&amp;nbsp; newCover(),&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ctx:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ctx,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; rnd:&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;rnd,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; target:&amp;nbsp; &amp;nbsp; &amp;nbsp; target,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; runningJobs: map[jobIntrospector]struct{}{},&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ctRegenerate: make(chan struct{}),&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; f.execQueues = &lt;font style=&quot;color: rgb(255, 128, 0);&quot;&gt;newExecQueues&lt;/font&gt;(f)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; f.&lt;font style=&quot;color: rgb(255, 128, 0);&quot;&gt;updateChoiceTable&lt;/font&gt;(nil)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; go f.choiceTableUpdater()&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if cfg.Debug {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; go f.logCurrentStats()&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return f&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="ia1y3fHBxI8tkKXysV4F-1" vertex="1">
          <mxGeometry x="10" y="25" width="370" height="370" as="geometry" />
        </mxCell>
        <mxCell id="ia1y3fHBxI8tkKXysV4F-3" value="pkg\fuzzer\fuzzer.go" style="swimlane;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="560" y="556.25" width="460" height="190" as="geometry" />
        </mxCell>
        <mxCell id="ia1y3fHBxI8tkKXysV4F-4" value="&lt;div&gt;func (fuzzer *Fuzzer) &lt;font style=&quot;color: rgb(255, 128, 0);&quot;&gt;updateChoiceTable&lt;/font&gt;(programs []*prog.Prog) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; newCt := fuzzer.target.&lt;font style=&quot;color: rgb(255, 0, 0);&quot;&gt;BuildChoiceTable&lt;/font&gt;(programs, fuzzer.Config.EnabledCalls)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; fuzzer.ctMu.Lock()&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; defer fuzzer.ctMu.Unlock()&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if len(programs) &amp;gt;= fuzzer.ctProgs {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fuzzer.ctProgs = len(programs)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fuzzer.ct = newCt&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="ia1y3fHBxI8tkKXysV4F-3" vertex="1">
          <mxGeometry x="10" y="30" width="450" height="160" as="geometry" />
        </mxCell>
        <mxCell id="ia1y3fHBxI8tkKXysV4F-5" value="" style="strokeWidth=2;html=1;shape=mxgraph.flowchart.annotation_2;align=left;labelPosition=right;pointerEvents=1;" parent="1" vertex="1">
          <mxGeometry x="490" y="-330" width="50" height="1070" as="geometry" />
        </mxCell>
        <mxCell id="ia1y3fHBxI8tkKXysV4F-6" value="" style="strokeWidth=2;html=1;shape=mxgraph.flowchart.annotation_2;align=left;labelPosition=right;pointerEvents=1;" parent="1" vertex="1">
          <mxGeometry x="890" y="-400" width="50" height="830" as="geometry" />
        </mxCell>
        <mxCell id="ia1y3fHBxI8tkKXysV4F-7" value="" style="strokeWidth=2;html=1;shape=mxgraph.flowchart.annotation_2;align=left;labelPosition=right;pointerEvents=1;" parent="1" vertex="1">
          <mxGeometry x="1269" y="-560" width="50" height="430" as="geometry" />
        </mxCell>
        <mxCell id="ia1y3fHBxI8tkKXysV4F-9" value="" style="strokeWidth=2;html=1;shape=mxgraph.flowchart.annotation_2;align=left;labelPosition=right;pointerEvents=1;" parent="1" vertex="1">
          <mxGeometry x="1594" y="-710" width="60" height="430" as="geometry" />
        </mxCell>
        <mxCell id="ia1y3fHBxI8tkKXysV4F-10" value="prog\prio.go" style="swimlane;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1080" y="556.25" width="540" height="808.75" as="geometry" />
        </mxCell>
        <mxCell id="ia1y3fHBxI8tkKXysV4F-11" value="&lt;div&gt;func (target *Target) &lt;font style=&quot;color: rgb(255, 0, 0);&quot;&gt;BuildChoiceTable&lt;/font&gt;(corpus []*Prog, enabled map[*Syscall]bool) *ChoiceTable {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if enabled == nil {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; enabled = make(map[*Syscall]bool)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for _, c := range target.Syscalls {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; enabled[c] = true&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; noGenerateCalls := make(map[int]bool)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; enabledCalls := make(map[*Syscall]bool)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for call := range enabled {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if call.Attrs.NoGenerate {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; noGenerateCalls[call.ID] = true&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } else if !call.Attrs.Disabled {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; enabledCalls[call] = true&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; var generatableCalls []*Syscall&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for c := range enabledCalls {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; generatableCalls = append(generatableCalls, c)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if len(generatableCalls) == 0 {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; panic(&quot;no syscalls enabled and generatable&quot;)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; sort.Slice(generatableCalls, func(i, j int) bool {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return generatableCalls[i].ID &amp;lt; generatableCalls[j].ID&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; })&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for _, p := range corpus {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for _, call := range p.Calls {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if !enabledCalls[call.Meta] &amp;amp;&amp;amp; !noGenerateCalls[call.Meta.ID] {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;corpus contains disabled syscall %v\n&quot;, call.Meta.Name)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for call := range enabled {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fmt.Printf(&quot;%s: enabled\n&quot;, call.Name)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; panic(&quot;disabled syscall&quot;)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; prios := target.&lt;font style=&quot;color: rgb(255, 128, 0);&quot;&gt;CalculatePriorities&lt;/font&gt;(corpus)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; run := make([][]int32, len(target.Syscalls))&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for i := range run {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if !enabledCalls[target.Syscalls[i]] {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; continue&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; run[i] = make([]int32, len(target.Syscalls))&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var sum int32&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for j := range run[i] {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if enabledCalls[target.Syscalls[j]] {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; sum += prios[i][j]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; run[i][j] = sum&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return &amp;amp;ChoiceTable{target, run, generatableCalls}&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="ia1y3fHBxI8tkKXysV4F-10" vertex="1">
          <mxGeometry x="10" y="28.75" width="530" height="780" as="geometry" />
        </mxCell>
        <mxCell id="GyCAbzdA3tvHO7J_xBkt-1" value="pkg\fuzzer\job.go" style="swimlane;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1350" y="-35" width="410" height="190" as="geometry" />
        </mxCell>
        <mxCell id="GyCAbzdA3tvHO7J_xBkt-2" value="&lt;div&gt;func &lt;font style=&quot;color: rgb(255, 128, 0);&quot;&gt;genProgRequest&lt;/font&gt;(fuzzer *Fuzzer, rnd *rand.Rand) *queue.Request {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; p := fuzzer.target.Generate(rnd,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; prog.RecommendedCalls,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fuzzer.ChoiceTable())&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return &amp;amp;queue.Request{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Prog:&amp;nbsp; &amp;nbsp; &amp;nbsp;p,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ExecOpts: setFlags(flatrpc.ExecFlagCollectSignal),&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Stat:&amp;nbsp; &amp;nbsp; &amp;nbsp;fuzzer.statExecGenerate,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="GyCAbzdA3tvHO7J_xBkt-1" vertex="1">
          <mxGeometry x="5" y="30" width="400" height="160" as="geometry" />
        </mxCell>
        <mxCell id="GyCAbzdA3tvHO7J_xBkt-3" value="prog\prio.go" style="swimlane;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="1700" y="556.25" width="370" height="243.75" as="geometry" />
        </mxCell>
        <mxCell id="GyCAbzdA3tvHO7J_xBkt-4" value="&lt;div&gt;func (target *Target) &lt;font style=&quot;color: rgb(255, 128, 0);&quot;&gt;CalculatePriorities&lt;/font&gt;(corpus []*Prog) [][]int32 {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; static := target.&lt;font style=&quot;color: rgb(128, 255, 0);&quot;&gt;calcStaticPriorities&lt;/font&gt;()&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if len(corpus) != 0 {&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; dynamic := target.&lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;font style=&quot;color: light-dark(rgb(128, 255, 0), rgb(255, 255, 255));&quot;&gt;calcDynamicPrio&lt;/font&gt;&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;(corpus)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for i, prios := range dynamic {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; dst := static[i]&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for j, p := range prios {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; dst[j] += p&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return static&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="GyCAbzdA3tvHO7J_xBkt-3" vertex="1">
          <mxGeometry x="10" y="33.75" width="360" height="200" as="geometry" />
        </mxCell>
        <mxCell id="GyCAbzdA3tvHO7J_xBkt-5" value="prog\prio.go" style="swimlane;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="2190" y="340" width="410" height="450" as="geometry" />
        </mxCell>
        <mxCell id="GyCAbzdA3tvHO7J_xBkt-6" value="&lt;div&gt;func (target *Target) &lt;font style=&quot;color: rgb(128, 255, 0);&quot;&gt;calcStaticPriorities&lt;/font&gt;() [][]int32 {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; uses := target.&lt;font style=&quot;color: rgb(0, 127, 255);&quot;&gt;calcResourceUsage&lt;/font&gt;()&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; prios := make([][]int32, len(target.Syscalls))&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for i := range prios {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; prios[i] = make([]int32, len(target.Syscalls))&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for _, weights := range uses {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for _, w0 := range weights {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for _, w1 := range weights {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if w0.call == w1.call {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Self-priority is assigned below.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; continue&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; prios[w0.call][w1.call] += w0.inout*w1.in*3/2 + w0.inout*w1.inout&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for c0, pp := range prios {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; max := slices.Max(pp)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if max == 0 {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pp[c0] = 1&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } else {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pp[c0] = max * 3 / 4&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; normalizePrios(prios)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return prios&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="GyCAbzdA3tvHO7J_xBkt-5" vertex="1">
          <mxGeometry x="10" y="30" width="400" height="420" as="geometry" />
        </mxCell>
        <mxCell id="GyCAbzdA3tvHO7J_xBkt-7" value="prog\prio.go" style="swimlane;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="2190" y="850" width="360" height="330" as="geometry" />
        </mxCell>
        <mxCell id="GyCAbzdA3tvHO7J_xBkt-8" value="&lt;div&gt;func (target *Target) &lt;font style=&quot;color: rgb(128, 255, 0);&quot;&gt;calcDynamicPrio&lt;/font&gt;(corpus []*Prog) [][]int32 {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; prios := make([][]int32, len(target.Syscalls))&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for i := range prios {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; prios[i] = make([]int32, len(target.Syscalls))&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for _, p := range corpus {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for idx0, c0 := range p.Calls {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for _, c1 := range p.Calls[idx0+1:] {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; prios[c0.Meta.ID][c1.Meta.ID]++&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for i := range prios {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for j, val := range prios[i] {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; prios[i][j] = int32(2.0 * math.Sqrt(float64(val)))&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; normalizePrios(prios)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return prios&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="GyCAbzdA3tvHO7J_xBkt-7" vertex="1">
          <mxGeometry x="10" y="30" width="350" height="300" as="geometry" />
        </mxCell>
        <mxCell id="GyCAbzdA3tvHO7J_xBkt-9" value="prog\prio.go" style="swimlane;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="2710" y="340" width="450" height="810" as="geometry" />
        </mxCell>
        <mxCell id="GyCAbzdA3tvHO7J_xBkt-10" value="&lt;div&gt;func (target *Target) &lt;font style=&quot;color: rgb(0, 127, 255);&quot;&gt;calcResourceUsage&lt;/font&gt;() map[string]map[int]weights {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; uses := make(map[string]map[int]weights)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; ForeachType(target.Syscalls, func(t Type, ctx *TypeCtx) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; c := ctx.Meta&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; switch a := t.(type) {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case *ResourceType:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if target.AuxResources[a.Desc.Name] {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; noteUsagef(uses, c, 1, ctx.Dir, &quot;res%v&quot;, a.Desc.Name)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } else {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; str := &quot;res&quot;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for i, k := range a.Desc.Kind {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; str += &quot;-&quot; + k&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; w := int32(10)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if i &amp;lt; len(a.Desc.Kind)-1 {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; w = 2&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; noteUsage(uses, c, w, ctx.Dir, str)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case *PtrType:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if _, ok := a.Elem.(*StructType); ok {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; noteUsagef(uses, c, 10, ctx.Dir, &quot;ptrto-%v&quot;, a.Elem.Name())&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if _, ok := a.Elem.(*UnionType); ok {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; noteUsagef(uses, c, 10, ctx.Dir, &quot;ptrto-%v&quot;, a.Elem.Name())&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if arr, ok := a.Elem.(*ArrayType); ok {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; noteUsagef(uses, c, 10, ctx.Dir, &quot;ptrto-%v&quot;, arr.Elem.Name())&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case *BufferType:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; switch a.Kind {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case BufferBlobRand, BufferBlobRange, BufferText, BufferCompressed:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case BufferString, BufferGlob:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if a.SubKind != &quot;&quot; {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; noteUsagef(uses, c, 2, ctx.Dir, &quot;str-%v&quot;, a.SubKind)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case BufferFilename:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; noteUsage(uses, c, 10, DirIn, &quot;filename&quot;)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; default:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; panic(&quot;unknown buffer kind&quot;)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case *VmaType:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; noteUsage(uses, c, 5, ctx.Dir, &quot;vma&quot;)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case *IntType:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; switch a.Kind {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; case IntPlain, IntRange:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; default:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; panic(&quot;unknown int kind&quot;)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; })&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return uses&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="GyCAbzdA3tvHO7J_xBkt-9" vertex="1">
          <mxGeometry x="10" y="30" width="440" height="780" as="geometry" />
        </mxCell>
        <mxCell id="7rzwynCThFNtX3iMGv0R-1" value="pkg\fuzzer\job.go" style="swimlane;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="1350" y="195" width="425" height="295" as="geometry" />
        </mxCell>
        <mxCell id="7rzwynCThFNtX3iMGv0R-2" value="&lt;div&gt;func &lt;font style=&quot;color: rgb(255, 128, 0);&quot;&gt;mutateProgRequest&lt;/font&gt;(fuzzer *Fuzzer, rnd *rand.Rand) *queue.Request {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; p := fuzzer.Config.Corpus.ChooseProgram(rnd)&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; if p == nil {&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return nil&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; newP := p.Clone()&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; newP.Mutate(rnd,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; prog.RecommendedCalls,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fuzzer.ChoiceTable(),&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fuzzer.Config.NoMutateCalls,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; fuzzer.Config.Corpus.Programs(),&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; )&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; return &amp;amp;queue.Request{&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Prog:&amp;nbsp; &amp;nbsp; &amp;nbsp;newP,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ExecOpts: setFlags(flatrpc.ExecFlagCollectSignal),&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Stat:&amp;nbsp; &amp;nbsp; &amp;nbsp;fuzzer.statExecFuzz,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; }&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="7rzwynCThFNtX3iMGv0R-1">
          <mxGeometry x="5" y="25" width="420" height="270" as="geometry" />
        </mxCell>
        <mxCell id="7rzwynCThFNtX3iMGv0R-3" value="" style="strokeWidth=2;html=1;shape=mxgraph.flowchart.annotation_2;align=left;labelPosition=right;pointerEvents=1;" vertex="1" parent="1">
          <mxGeometry x="1269" y="-30" width="50" height="520" as="geometry" />
        </mxCell>
        <mxCell id="7rzwynCThFNtX3iMGv0R-4" value="" style="strokeWidth=2;html=1;shape=mxgraph.flowchart.annotation_2;align=left;labelPosition=right;pointerEvents=1;" vertex="1" parent="1">
          <mxGeometry x="2070" y="340" width="50" height="840" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
